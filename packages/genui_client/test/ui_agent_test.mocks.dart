// Mocks generated by Mockito 5.4.6 from annotations
// in genui_client/test/ui_agent_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter/foundation.dart' as _i4;
import 'package:genui_client/genui_client.dart' as _i9;
import 'package:genui_client/src/genui_client.dart' as _i8;
import 'package:genui_client/src/genui_manager.dart' as _i5;
import 'package:genui_client/src/model/catalog.dart' as _i3;
import 'package:genui_client/src/model/catalog_item.dart' as _i2;
import 'package:genui_client/src/model/ui_models.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeWidgetValueStore_0 extends _i1.SmartFake
    implements _i2.WidgetValueStore {
  _FakeWidgetValueStore_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCatalog_1 extends _i1.SmartFake implements _i3.Catalog {
  _FakeCatalog_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueNotifier_2<T> extends _i1.SmartFake
    implements _i4.ValueNotifier<T> {
  _FakeValueNotifier_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GenUiManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenUiManager extends _i1.Mock implements _i5.GenUiManager {
  MockGenUiManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WidgetValueStore get valueStore =>
      (super.noSuchMethod(
            Invocation.getter(#valueStore),
            returnValue: _FakeWidgetValueStore_0(
              this,
              Invocation.getter(#valueStore),
            ),
          )
          as _i2.WidgetValueStore);

  @override
  Map<String, _i4.ValueNotifier<_i6.UiDefinition?>> get surfaces =>
      (super.noSuchMethod(
            Invocation.getter(#surfaces),
            returnValue: <String, _i4.ValueNotifier<_i6.UiDefinition?>>{},
          )
          as Map<String, _i4.ValueNotifier<_i6.UiDefinition?>>);

  @override
  _i7.Stream<_i5.GenUiUpdate> get updates =>
      (super.noSuchMethod(
            Invocation.getter(#updates),
            returnValue: _i7.Stream<_i5.GenUiUpdate>.empty(),
          )
          as _i7.Stream<_i5.GenUiUpdate>);

  @override
  _i3.Catalog get catalog =>
      (super.noSuchMethod(
            Invocation.getter(#catalog),
            returnValue: _FakeCatalog_1(this, Invocation.getter(#catalog)),
          )
          as _i3.Catalog);

  @override
  _i4.ValueNotifier<_i6.UiDefinition?> surface(String? surfaceId) =>
      (super.noSuchMethod(
            Invocation.method(#surface, [surfaceId]),
            returnValue: _FakeValueNotifier_2<_i6.UiDefinition?>(
              this,
              Invocation.method(#surface, [surfaceId]),
            ),
          )
          as _i4.ValueNotifier<_i6.UiDefinition?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addOrUpdateSurface(
    String? surfaceId,
    Map<String, Object?>? definition,
  ) => super.noSuchMethod(
    Invocation.method(#addOrUpdateSurface, [surfaceId, definition]),
    returnValueForMissingStub: null,
  );

  @override
  void deleteSurface(String? surfaceId) => super.noSuchMethod(
    Invocation.method(#deleteSurface, [surfaceId]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GenUIClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenUIClient extends _i1.Mock implements _i8.GenUIClient {
  MockGenUIClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i9.ChatMessage> generateUI(
    _i3.Catalog? catalog,
    List<_i9.ChatMessage>? conversation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateUI, [catalog, conversation]),
            returnValue: _i7.Stream<_i9.ChatMessage>.empty(),
          )
          as _i7.Stream<_i9.ChatMessage>);
}
