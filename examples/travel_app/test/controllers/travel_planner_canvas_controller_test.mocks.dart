// Mocks generated by Mockito 5.4.6 from annotations
// in travel_app/test/controllers/travel_planner_canvas_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dart_schema_builder/dart_schema_builder.dart' as _i9;
import 'package:flutter/foundation.dart' as _i2;
import 'package:flutter_genui/src/ai_client/ai_client.dart' as _i6;
import 'package:flutter_genui/src/core/genui_configuration.dart' as _i3;
import 'package:flutter_genui/src/core/genui_manager.dart' as _i12;
import 'package:flutter_genui/src/model/catalog.dart' as _i5;
import 'package:flutter_genui/src/model/catalog_item.dart' as _i4;
import 'package:flutter_genui/src/model/chat_message.dart' as _i8;
import 'package:flutter_genui/src/model/tools.dart' as _i10;
import 'package:flutter_genui/src/model/ui_models.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeValueListenable_0<T> extends _i1.SmartFake
    implements _i2.ValueListenable<T> {
  _FakeValueListenable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGenUiConfiguration_1 extends _i1.SmartFake
    implements _i3.GenUiConfiguration {
  _FakeGenUiConfiguration_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidgetValueStore_2 extends _i1.SmartFake
    implements _i4.WidgetValueStore {
  _FakeWidgetValueStore_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCatalog_3 extends _i1.SmartFake implements _i5.Catalog {
  _FakeCatalog_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValueNotifier_4<T> extends _i1.SmartFake
    implements _i2.ValueNotifier<T> {
  _FakeValueNotifier_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAiClient extends _i1.Mock implements _i6.AiClient {
  MockAiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueListenable<int> get activeRequests =>
      (super.noSuchMethod(
            Invocation.getter(#activeRequests),
            returnValue: _FakeValueListenable_0<int>(
              this,
              Invocation.getter(#activeRequests),
            ),
          )
          as _i2.ValueListenable<int>);

  @override
  _i7.Future<T?> generateContent<T extends Object>(
    List<_i8.ChatMessage>? conversation,
    _i9.Schema? outputSchema, {
    Iterable<_i10.AiTool<Map<String, Object?>>>? additionalTools = const [],
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateContent,
              [conversation, outputSchema],
              {#additionalTools: additionalTools},
            ),
            returnValue: _i7.Future<T?>.value(),
          )
          as _i7.Future<T?>);

  @override
  _i7.Future<String> generateText(
    List<_i8.ChatMessage>? conversation, {
    Iterable<_i10.AiTool<Map<String, Object?>>>? additionalTools = const [],
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateText,
              [conversation],
              {#additionalTools: additionalTools},
            ),
            returnValue: _i7.Future<String>.value(
              _i11.dummyValue<String>(
                this,
                Invocation.method(
                  #generateText,
                  [conversation],
                  {#additionalTools: additionalTools},
                ),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GenUiManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenUiManager extends _i1.Mock implements _i12.GenUiManager {
  MockGenUiManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GenUiConfiguration get configuration =>
      (super.noSuchMethod(
            Invocation.getter(#configuration),
            returnValue: _FakeGenUiConfiguration_1(
              this,
              Invocation.getter(#configuration),
            ),
          )
          as _i3.GenUiConfiguration);

  @override
  _i4.WidgetValueStore get valueStore =>
      (super.noSuchMethod(
            Invocation.getter(#valueStore),
            returnValue: _FakeWidgetValueStore_2(
              this,
              Invocation.getter(#valueStore),
            ),
          )
          as _i4.WidgetValueStore);

  @override
  Map<String, _i2.ValueNotifier<_i13.UiDefinition?>> get surfaces =>
      (super.noSuchMethod(
            Invocation.getter(#surfaces),
            returnValue: <String, _i2.ValueNotifier<_i13.UiDefinition?>>{},
          )
          as Map<String, _i2.ValueNotifier<_i13.UiDefinition?>>);

  @override
  _i7.Stream<_i12.GenUiUpdate> get surfaceUpdates =>
      (super.noSuchMethod(
            Invocation.getter(#surfaceUpdates),
            returnValue: _i7.Stream<_i12.GenUiUpdate>.empty(),
          )
          as _i7.Stream<_i12.GenUiUpdate>);

  @override
  _i7.Stream<_i8.UserMessage> get onSubmit =>
      (super.noSuchMethod(
            Invocation.getter(#onSubmit),
            returnValue: _i7.Stream<_i8.UserMessage>.empty(),
          )
          as _i7.Stream<_i8.UserMessage>);

  @override
  _i5.Catalog get catalog =>
      (super.noSuchMethod(
            Invocation.getter(#catalog),
            returnValue: _FakeCatalog_3(this, Invocation.getter(#catalog)),
          )
          as _i5.Catalog);

  @override
  void handleUiEvent(_i13.UiEvent? event) => super.noSuchMethod(
    Invocation.method(#handleUiEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i10.AiTool<Map<String, Object?>>> getTools() =>
      (super.noSuchMethod(
            Invocation.method(#getTools, []),
            returnValue: <_i10.AiTool<Map<String, Object?>>>[],
          )
          as List<_i10.AiTool<Map<String, Object?>>>);

  @override
  _i2.ValueNotifier<_i13.UiDefinition?> surface(String? surfaceId) =>
      (super.noSuchMethod(
            Invocation.method(#surface, [surfaceId]),
            returnValue: _FakeValueNotifier_4<_i13.UiDefinition?>(
              this,
              Invocation.method(#surface, [surfaceId]),
            ),
          )
          as _i2.ValueNotifier<_i13.UiDefinition?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addOrUpdateSurface(
    String? surfaceId,
    Map<String, Object?>? definition,
  ) => super.noSuchMethod(
    Invocation.method(#addOrUpdateSurface, [surfaceId, definition]),
    returnValueForMissingStub: null,
  );

  @override
  void deleteSurface(String? surfaceId) => super.noSuchMethod(
    Invocation.method(#deleteSurface, [surfaceId]),
    returnValueForMissingStub: null,
  );
}
